#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main()
{
    pid_t pid, child_pid;
    int status;
    printf("Before fork()");
    pid= fork();
    if (pid<0){
        printf ("fork failed");
        return 1;
    }
    else if (pid == 0){
        printf("Hello from child process PID= %d\n",getpid());
        return 0;
    }
    else{
        printf("Hello from the Parent process! PID=%d",getpid());
        printf("child Process PID=%d",child_pid);
    }
    printf ("After fork()\n");
    return 0;
}




//wait

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main()
{
    if (fork() == 0){
        printf("Hello from child\n");
    }
    else{
        printf("Hello from the Parent\n");
        wait(NULL);
        printf("child Process is terminated\n");
    }
    printf ("\n bye \n");
    return 0;
}


//exec

#include <stdio.h>
#include <unistd.h>

int main(){
printf("This is original process\n");
if (execlp ("ls","ls","-1", NULL)== -1){
    printf ("exec error");
    return 1;
}
printf("This line will not be printed ");
return 0;
}



//fcfs


#include<stdio.h>
int main(){
    int pid[15];
    int bt[15];
    int n;
    printf("enter the number of process:\n");
    scanf("%d",&n);
    printf("enter the pid of all the processor\n");
    for(int i=0;i<n;i++)
{
    scanf("%d",&pid[i]);
    
}
    printf("enter the burst time of all the processor:\n");
    for(int i=0;i<n;i++){
        scanf("%d",&bt[i]);
    }
    int i,wt[n];
    wt[0]=0;
    for(i=1;i<n;i++)
    {
        wt[i]=bt[i-1]+wt[i-1];
    }
    printf("processID  bursttime  waitingtime  touraroundtime\n");
    float twt=0,tat=0;
    for(int i=0;i<n;i++){
        printf("%d\t\t\t",pid[i]);
         printf("%d\t\t\t",bt[i]);
          printf("%d\t\t\t",wt[i]);
           printf("%d\t\t",bt[i]+wt[i]);
           printf("\n");
           twt+=wt[i];
           tat+=(wt[i]+bt[i]);
    }
    float att,awt;
    awt=twt/n;
    att=tat/n;
    printf("\nthe average weight time=%f",awt);
    printf("\nthe average tour around time=%f",att);
    
}


//#sjf


#include<stdio.h>
int main()
{
    int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,totalT=0,pos,temp;
    float avg_wt,avg_tat;
    printf("Enter number of process:");
    scanf("%d",&n);
 
    printf("\nEnter Burst Time:\n");
    for(i=0;i<n;i++)
    {
        printf("p%d:",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;
    }
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
                pos=j;
        }
 
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
 
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
 
    wt[0]=0;
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
        total+=wt[i];   
    }
    avg_wt=(float)total/n;  
 
    printf("\nProcess\t BurstTime \tWaitingTime\tTurnaroundTime");
    for(i=0;i<n;i++)
    {
        
        tat[i]=bt[i]+wt[i]; 
        totalT+=tat[i];      
        printf("\np%d\t\t\t%d\t\t\t%d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
    }
    avg_tat=(float)totalT/n;     
    printf("\n\nAverage Waiting Time=%f",avg_wt);
    printf("\nAverage Turnaround Time=%f",avg_tat);
}


//mft


#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

int main()
{
    int n, m, i, count = 0, j, pn[100];
    int p[100], size[100], internalFragmentation[100];
    bool flag[100];

    // Input: Number of processes and memory partitions
    printf("ENTER THE NO PROCESS AND MEMORY:\n");
    scanf("%d%d", &n, &m);

    // Input: Size of each process
    printf("ENTER THE SIZE OF PROCESS \n");
    for (i = 0; i < n; i++)
        scanf("%d", &p[i]);

    // Input: Size of each memory partition
    printf("ENTER THE SIZE OF MEMORY PARTITION\n\n");
    for (i = 0; i < m; i++)
    {
        scanf("%d", &size[i]);
        flag[i] = 0;
        internalFragmentation[i] = 0;
    }

    // Memory allocation using First Fit algorithm
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (p[i] <= size[j] && flag[j] == 0)
            {
                flag[j] = true;
                pn[j] = i;
                internalFragmentation[j] = size[j] - p[i]; // Calculate internal fragmentation
                count++;
                break; // Break out of the inner loop once allocated
            }
        }
    }

    // Output: Display the allocated memory for each partition, the corresponding process, and internal fragmentation
    printf("NO OF PROCESS CAN ACCOMMODATE: %d\n\n", count);
    printf("MEMORY\tPROCESS\tINTERNAL FRAGMENTATION\n");

    int totalInternalFragmentation = 0; // Variable to accumulate total internal fragmentation

    for (i = 0; i < m; i++ )
    {
        if (flag[i] == 1)
        {
            printf("%d <-->%d\t    %d\n", size[i], p[pn[i]], internalFragmentation[i]);
            totalInternalFragmentation += internalFragmentation[i]; // Accumulate total internal fragmentation
        }
        else
            printf("%d\tMEMORY NOT ALLOCATED\n", size[i]);
    }

    printf("\nTotal Internal Fragmentation: %d\n", totalInternalFragmentation);

    return 0;
}


//fifo



#include <stdio.h>

#define MAX_FRAMES 3
#define MAX_PAGES 10

int main() {
    int referenceString[MAX_PAGES] = {1, 3, 0, 3, 5, 6, 3, 7, 8, 5}; // Reference string
    int frames[MAX_FRAMES]; // Frames to hold pages
    int pageFaults = 0; // Count of page faults
    int nextFrameIndex = 0; // Index to keep track of the next frame to replace

    // Initialize frames with -1 to indicate empty frames
    for (int i = 0; i < MAX_FRAMES; i++) 
   {
        frames[i] = -1;
    }

    // Simulate FIFO page replacement algorithm
    for (int i = 0; i < MAX_PAGES; i++) 
    {
        printf("Referencing page %d...\n", referenceString[i]);

        // If the page is not in frames, replace the oldest page
        int pageFound = 0;
        for (int j = 0; j < MAX_FRAMES; j++) 
       {
            if (frames[j] == referenceString[i]) 
           {
                pageFound = 1; // Page found in frames
                break;
            }
        }

        if (!pageFound) {
            frames[nextFrameIndex] = referenceString[i];
            nextFrameIndex = (nextFrameIndex + 1) % MAX_FRAMES;
            pageFaults++;
            printf("Page fault occurred!\n");
        } else {
            printf("Page hit!\n");
        }

        // Print frames
        printf("Frames: ");
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == -1) {
                printf("[ ] ");
            } else {
                printf("[%d] ", frames[j]);
            }
        }
        printf("\n\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);

    return 0;
}
